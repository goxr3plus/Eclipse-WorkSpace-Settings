package com.intralot.l10.ats.manager.retrieve.document;

import java.util.Collections;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.test.context.ContextConfiguration;

import com.intralot.l10.ats.entity.RetrieveDocumentRequest;
import com.intralot.l10.ats.entity.SubmitDocumentRequest;
import com.intralot.l10.ats.repository.AtsRetrieveDocumentRepository;

import global.config.TestConfig;

import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
@ContextConfiguration(classes = {TestConfig.class})
public class RetrieveDocumentJPAManagerTest {

	@InjectMocks
	RetrieveDocumentJPAManager retrieveDocumentJPAManager;

	@Mock
	AtsRetrieveDocumentRepository atsRetrieveDocumentRepository;

	private SubmitDocumentRequest submitDocumentRequest;

	@Before
	public void init() {

		submitDocumentRequest = new SubmitDocumentRequest();
		submitDocumentRequest.setGameId(5);
		submitDocumentRequest.setDrawId(100100);
		submitDocumentRequest.setWinnersIncluded(true);
		submitDocumentRequest.setRevisionNumber(1);

	}

	@Test
	public void getPendingRetrieveDocumentRequest() {
		when(atsRetrieveDocumentRepository.findBySystemIdAndDocumentTypeIdAndStatus(anyInt(), anyInt(), anyInt()))
			.thenReturn(Collections.singletonList(new RetrieveDocumentRequest()));

		retrieveDocumentJPAManager.getPendingRetrieveDocumentRequest(5, 1, 3);

	}

	@Test
	public void getPendingRetrieveDocumentRequestEmpty() {
		when(atsRetrieveDocumentRepository.findBySystemIdAndDocumentTypeIdAndStatus(anyInt(), anyInt(), anyInt()))
			.thenReturn(Collections.emptyList());

		retrieveDocumentJPAManager.getPendingRetrieveDocumentRequest(5, 1, 3);

	}
}
